/* Given a matrix of dimension r*c where each cell in the matrix can have values 0, 1 or 2 which has the following meaning:
0 : Empty cell
1 : Cells have fresh oranges
2 : Cells have rotten oranges

So, we have to determine what is the minimum time required to rot all oranges. A rotten orange at index [i,j] can rot other fresh orange 
at indexes [i-1,j], [i+1,j], [i,j-1], [i,j+1] (up, down, left and right) in unit time. If it is impossible to rot every orange then simply
return -1.  */

#include <bits/stdc++.h>
using namespace std;
int t,r,c;
int main() 
{
    cin>>t;
    for(int i=0;i<t;i++)
    {
        cin>>r>>c;
        map<pair<int,int>,int > mp;
        int cnt=0;
        int a[r][c];
        for(int j=0;j<r;j++)
        {
            for(int k=0;k<c;k++)
            {
                cin>>a[j][k];
            }
        }
        queue<pair<int,int> >q;
        for(int j=0;j<r;j++)
            {
                for(int k=0;k<c;k++)
                {
                    if(a[j][k]==2)
                    {
                        q.push(make_pair(j,k));
                    }
                }
            }
            while(!q.empty())
            {
                cnt++;
                queue<pair<int,int> > q1;
                pair<int,int> p;
                while(!q.empty())
                {
                    p=q.front();
                    int x=p.first;
                    int y=p.second;
                    a[x][y]=2;
                    q.pop();
                    if(x+1<r&&a[x+1][y]==1&&mp[{x+1,y}]==0)
                    {
                        q1.push(make_pair(x+1,y));
                        mp[{x+1,y}]==1;
                    }
                    if(y+1<c&&a[x][y+1]==1&&mp[{x,y+1}]==0)
                    {
                        q1.push(make_pair(x,y+1));
                        mp[{x,y+1}]==1;
                    }
                    if(x-1>=0&&a[x-1][y]==1&&mp[{x-1,y}]==0)
                    {
                        q1.push(make_pair(x-1,y));
                        mp[{x-1,y}]=1;
                    }
                    if(y-1>=0&&a[x][y-1]==1&&mp[{x,y-1}]==0)
                    {
                        q1.push(make_pair(x,y-1));
                        mp[{x,y-1}]=1;
                    }
                }
                q=q1;
            }
           cnt--;
            for(int j=0;j<r;j++)
            {
                for(int k=0;k<c;k++)
                {
                    if(a[j][k]==1)
                    {
                        cnt=-1;
                    }
                }
            }
        cout<<cnt<<endl;
    }
	return 0;
}
